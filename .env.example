# ===== Bot ZEUS - Exemplo de configuração (.env) =====
# Copie este arquivo para ".env" e preencha com seus valores.
# NUNCA versione o arquivo .env com chaves privadas ou segredos.

# --- Carteira / Chaves ---
WALLET_ADDRESS=0xSEU_ENDERECO
PRIVATE_KEY=sua_chave_privada_hex_sem_0x

# --- RPC / Provedor ---
# Use SOMENTE um dos campos abaixo. CUSTOM_RPC_URL tem prioridade sobre INFURA_URL.
# Ex.: https://polygon-mainnet.infura.io/v3/SEU_PROJECT_ID
CUSTOM_RPC_URL=
INFURA_URL=

# --- Contratos do Bot (FlashLoan) ---
# Endereço do contrato implantado FlashLoanReceiver (V1 ou V2)
FLASHLOAN_CONTRACT_ADDRESS=0xENDERECO_FLASHLOAN_RECEIVER
# Opcional: contrato V2 com suporte a paths Uniswap V3 multihop on-chain
USE_FLASHLOAN_V2=0
FLASHLOAN_CONTRACT_ADDRESS_V2=

# --- DEXes (endereços na rede alvo) ---
# Uniswap V3
UNISWAP_V3_ROUTER_ADDRESS=0xENDERECO_SWAP_ROUTER_V3
QUOTER_ADDRESS=0xENDERECO_QUOTER_V3

# QuickSwap V2
QUICKSWAP_ROUTER_ADDRESS=0xENDERECO_QUICKSWAP_ROUTER02
# Opcional: se não fornecer, será inferido via router.factory()
QUICKSWAP_FACTORY_ADDRESS=

# SushiSwap V2
SUSHISWAP_ROUTER_ADDRESS=0xENDERECO_SUSHISWAP_ROUTER02
# Opcional: se não fornecer, será inferido via router.factory()
SUSHISWAP_FACTORY_ADDRESS=

# Observação: Preencha com os endereços da rede que você usa (ex.: Polygon mainnet).
# Exemplo (Polygon mainnet - verifique sempre na documentação oficial):
# QUICKSWAP_ROUTER_ADDRESS=0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff
# QUICKSWAP_FACTORY_ADDRESS=0x5757371414417b8c6caad45baef941abc7d3ab32
# SUSHISWAP_ROUTER_ADDRESS=0x1b02da8cb0d097eb8d57a175b88c7d8b47997506
# SUSHISWAP_FACTORY_ADDRESS=0xc35DADB65012eC5796536bD9864eD8773aBc74C4

# Uniswap V3 (exemplos conhecidos, CONFIRME para a rede alvo!):
# UNISWAP_V3_ROUTER_ADDRESS=0xE592427A0AEce92De3Edee1F18E0157C05861564
# QUOTER_ADDRESS=0x61fFE014bA17989E743c5F6cB21bF9697530B21e

# --- Tokens ---
USDC_ADDRESS=0xENDERECO_USDC
USDT_ADDRESS=0xENDERECO_USDT
WETH_ADDRESS=0xENDERECO_WETH
DAI_ADDRESS=0xENDERECO_DAI
WMATIC_ADDRESS=0xENDERECO_WMATIC

# Exemplos (Polygon mainnet - valide antes de usar):
# USDC_ADDRESS=0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174
# USDT_ADDRESS=0xC2132D05D31c914a87C6611C10748AEb04B58e8F
# WETH_ADDRESS=0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619
# DAI_ADDRESS=0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063
# WMATIC_ADDRESS=0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270

# --- Parâmetros operacionais ---
# Limite de gás por transação (ajuste conforme sua rota; 3.000.000 é conservador)
GAS_LIMIT=3000000
# Saldo mínimo de MATIC para continuar operando (para pagar gás)
MIN_BALANCE_MATIC=5
# Slippage em basis points (bps) — 1% = 100 bps
SLIPPAGE_BPS=70
# Deadline (segundos) adicionados ao timestamp atual
DEADLINE_SECONDS=180

# --- Varredura / Busca de oportunidades ---
# Tempo máximo de análise por ciclo (segundos)
SCAN_TIME_BUDGET_SECONDS=120
# Intervalo entre ciclos (segundos)
SCAN_INTERVAL_SECONDS=15
# Tokens ativos (chaves do catálogo em utils/config.py): ex.: "usdc,usdt,wmatic,weth,dai"
TOKENS_ACTIVE=

# Uniswap V3 multihop (quoter off-chain)
V3_FEES=500,3000
V3_MAX_HOPS=2
ENABLE_V3_MULTIHOP_SCAN=1

# Estratégias triangulares (apenas logging/priorização off-chain)
TRIANGULAR_MODE=0
TRIANGULAR_ONLY=0
TRIANGULAR_LOG_TOPK=3

# --- Regras de decisão ---
# Lucro líquido mínimo (em USDC) para considerar execução
MIN_PROFIT_USDC=0
# DRY_RUN=1 impede envio real de transações (recomendado durante testes)
DRY_RUN=1
# Logar paths V2/V3 detalhados (pode gerar muitos logs)
LOG_V2_PATHS=0

# --- Execução / Processo ---
# Iniciar automaticamente sem interação
BOT_AUTOSTART=0
# Se >0, encerra automaticamente após X segundos (modo autostart)
AUTO_DURATION_SECONDS=0
# Prevenir múltiplas instâncias (0 = impede; 1 = permite)
ALLOW_MULTIPLE=0

# --- Oráculos / APIs ---
# Polygonscan API para obter gas price (fallback para web3 se ausente)
POLYGONSCAN_API_KEY=
